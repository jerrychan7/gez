"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["578"],{3598:function(e,r,n){n.r(r),n.d(r,{default:function(){return t}});var s=n(1549),i=n(6603);function d(e){let r=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",div:"div",ul:"ul",li:"li",strong:"strong",h3:"h3"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.h1,{id:"介绍",children:["介绍",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#介绍",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["Gez 是 Genesis 迭代的第三个大版本，",(0,s.jsx)(r.a,{href:"https://github.com/dp-os/gez/tree/v1",target:"_blank",rel:"noopener noreferrer",children:"v1.0"})," 是基于 HTTP 请求来实现的远程组件，",(0,s.jsx)(r.a,{href:"https://github.com/dp-os/gez/tree/v2",target:"_blank",rel:"noopener noreferrer",children:"v2.0"})," 是基于 Module Federation v1.0\n实现的远程组件。随着主流浏览器都已经支持 ESM，这使得设计一款基于 ESM 的",(0,s.jsx)(r.a,{href:"/guide/essentials/module-link",children:"模块链接"}),"变成了可能。随着 Rspack v1.0 的发布，提供了对 ESM 更加友好的支持，这使得我们可以将可能变成了现实。于是，我们将 ",(0,s.jsx)(r.a,{href:"https://github.com/dp-os/gez",target:"_blank",rel:"noopener noreferrer",children:"v3.0"})," 版本重命名为 ",(0,s.jsx)(r.code,{children:"Gez"}),"。"]}),"\n",(0,s.jsxs)(r.h2,{id:"为什么选-gez",children:["为什么选 Gez",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#为什么选-gez",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"目前，社区中的微服务解决方案大致可归为三类：iframe、micro-app 和 Module Federation。然而，iframe 和 micro-app 模式更适用于对老旧项目的整合，这种整合往往以牺牲一定的运行效率为代价。而 Module Federation，尽管功能强大，却因其较高的接入成本和复杂的内部机制，使得问题排查变得异常困难。"}),"\n",(0,s.jsx)(r.p,{children:"相较于这些方案，Gez展现出了显著的优势。它完全基于 ESM（ECMAScript Modules）模块系统设计，不仅默认支持服务器端渲染（SSR），还允许每个服务灵活地导出或使用外部模块。这一过程中，Gez保持了简单透明的特性，使得依赖管理变得精准可控。更值得一提的是，通过 importmap 技术，Gez能够将多个服务的模块映射到具有强缓存、基于内容哈希的URL上，从而确保了应用的高效与稳定。"}),"\n",(0,s.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,s.jsx)(r.div,{className:"rspress-directive-title",children:"TIP"}),(0,s.jsx)(r.div,{className:"rspress-directive-content",children:(0,s.jsx)(r.p,{children:"Gez的初衷在于打造一个支持服务器端渲染（SSR）的微服务架构，旨在助力构建高性能且规模庞大的 Web 应用程序。"})})]}),"\n",(0,s.jsxs)(r.h2,{id:"调研",children:["调研",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#调研",children:"#"})]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"现代JavaScript支持"}),"：参考了Vite的定义，基准为浏览器对 ",(0,s.jsx)(r.a,{href:"https://caniuse.com/es6-module-dynamic-import",target:"_blank",rel:"noopener noreferrer",children:"ESM dynamic import"})," 和 ",(0,s.jsx)(r.a,{href:"https://caniuse.com/mdn-javascript_operators_import_meta",target:"_blank",rel:"noopener noreferrer",children:"import.meta"})," 的支持。"]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Chrome ≥ 87"}),"\n",(0,s.jsx)(r.li,{children:"Firefox ≥ 78"}),"\n",(0,s.jsx)(r.li,{children:"Safari ≥ 14"}),"\n",(0,s.jsx)(r.li,{children:"Edge ≥ 88"}),"\n",(0,s.jsx)(r.li,{children:"Node.js ≥ 22.6"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"内容哈希与importmap"}),"：构建产物具备内容哈希，利用 ",(0,s.jsx)(r.a,{href:"https://caniuse.com/?search=import%20map",target:"_blank",rel:"noopener noreferrer",children:"importmap"})," 技术将 ",(0,s.jsx)(r.code,{children:"import vue from 'vue'"})," 转换为 ",(0,s.jsx)(r.code,{children:"ssr-npm/npm/vue.[contenthash].final.js"}),"，确保静态文件的强缓存。对于不支持importmap的浏览器，采用 ",(0,s.jsx)(r.a,{href:"https://github.com/guybedford/es-module-shims",target:"_blank",rel:"noopener noreferrer",children:"es-module-shims"})," 进行降级处理。"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Rspack与ESM外部依赖"}),"：Rspack 的 externalsType 支持 ",(0,s.jsx)(r.a,{href:"https://rspack.dev/config/externals#externalstypemodule-import",target:"_blank",rel:"noopener noreferrer",children:"module-import"}),"，便于设置 ESM 模块的外部依赖。"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Node.js上的ESM热更新"}),"：尽管在 Node.js 上实现 ESM 模块的热更新具有挑战性，但可通过启用 ",(0,s.jsx)(r.code,{children:"node --experimental-vm-modules --experimental-import-meta-resolve"})," 来实现。"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Node.js原生支持TypeScript"}),"：自 Node.js 22.6 版本起，支持 ",(0,s.jsx)(r.code,{children:"--experimental-strip-types"}),"，从而原生支持运行TypeScript代码。"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.div,{className:"rspress-directive tip",children:[(0,s.jsx)(r.div,{className:"rspress-directive-title",children:"TIP"}),(0,s.jsx)(r.div,{className:"rspress-directive-content",children:(0,s.jsx)(r.p,{children:"经过一年多的构思与对Vite、farmfe、Rspack的深入调研，我们成功打通了这条路径，并确保其生产环境可用性。"})})]}),"\n",(0,s.jsxs)(r.h2,{id:"定位",children:["定位",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#定位",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["Gez 的定位并非旨在成为一个如同 ",(0,s.jsx)(r.a,{href:"https://nextjs.org",target:"_blank",rel:"noopener noreferrer",children:"Next.js"})," 或 ",(0,s.jsx)(r.a,{href:"https://nuxt.com/",target:"_blank",rel:"noopener noreferrer",children:"Nuxt.js"})," 那样功能全面的大型框架。相反，它致力于成为一个具备 ",(0,s.jsx)(r.a,{href:"https://www.typescriptlang.org/",target:"_blank",rel:"noopener noreferrer",children:"Typescript"}),"、ESM、SSR（服务器端渲染）以及",(0,s.jsx)(r.a,{href:"/guide/essentials/module-link",children:"模块链接"}),"等核心特性的基础设施。基于这样的基础，开发者可以自由地构建出属于自己的 ",(0,s.jsx)(r.code,{children:"Next.js"}),"。对于那些追求高度定制化的实现，Gez 将是一个理想的选择。"]}),"\n",(0,s.jsxs)(r.h2,{id:"模块链接",children:["模块链接",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#模块链接",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"在大型项目开发过程中，为了提高代码的可维护性和复用性，通常会将项目拆分为多个组件库、工具库和业务模块。这些部分往往分散在不同的位置，可能以 multirepo 或 monorepo 包的形式进行管理和存储。然而，这些分散的模块最终需要通过系统的主程序进行有效的整合和链接，以确保整个系统的协同工作。"}),"\n",(0,s.jsx)(r.p,{children:"在这个过程中，Gez发挥了至关重要的作用。其核心功能在于能够快速地将这些分布在不同地方的模块进行链接，从而形成一个完整、统一的系统。通过Gez，开发者可以轻松地实现一个服务的发布，并确保其他相关服务能够同步更新，大大提高了开发效率和系统的一致性。"}),"\n",(0,s.jsx)(r.p,{children:"简而言之，Gez为大型项目的模块整合提供了便捷、高效的解决方案，使得分散的模块能够迅速聚合，共同构建出稳定、可靠的大型应用系统。"}),"\n",(0,s.jsxs)(r.h2,{id:"设计理念",children:["设计理念",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#设计理念",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"在构建大型软件项目时，我们遵循以下核心理念，以确保系统的稳定性、可维护性和高效性："}),"\n",(0,s.jsxs)(r.h3,{id:"基础服务集中化",children:["基础服务集中化",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#基础服务集中化",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"我们倡导设计一个集中的基础服务，该服务将作为所有第三方依赖的单一来源。这种集中化的管理方式能够简化依赖关系，降低系统的复杂性。"}),"\n",(0,s.jsxs)(r.h3,{id:"统一依赖管理",children:["统一依赖管理",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#统一依赖管理",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"基础服务不仅提供第三方依赖，还负责这些依赖的统一维护和更新。通过集中管理依赖的生命周期，我们可以确保整个系统中使用的依赖版本是一致的，从而避免版本冲突和不一致性问题。"}),"\n",(0,s.jsxs)(r.h3,{id:"一次发布全局生效",children:["一次发布，全局生效",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#一次发布全局生效",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"当基础服务中的第三方依赖发生更新时，我们采用“一次发布，所有业务系统生效”的策略。这意味着一旦基础服务发布了新的依赖版本，所有依赖该服务的业务系统都将立即使用这些更新，无需在每个业务系统中单独进行更新操作。这种机制大大提高了系统的更新效率和一致性。"}),"\n",(0,s.jsxs)(r.h3,{id:"业务与依赖解耦",children:["业务与依赖解耦",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#业务与依赖解耦",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"我们鼓励将业务服务与第三方依赖进行解耦。业务服务应专注于构建和处理业务逻辑，而不直接管理第三方依赖。所有对第三方依赖的引用都应通过基础服务进行间接访问。这种设计使得业务服务更加轻量级、灵活，且易于维护和扩展。"}),"\n",(0,s.jsx)(r.p,{children:"综上所述，我们的设计理念旨在通过基础服务的集中化管理和统一维护，简化大型项目中的依赖关系，提高系统的整体稳定性和开发效率。同时，通过解耦业务服务与第三方依赖，我们为系统的未来扩展和维护奠定了坚实的基础。"}),"\n",(0,s.jsxs)(r.h2,{id:"兼容性",children:["兼容性",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#兼容性",children:"#"})]}),"\n",(0,s.jsx)(r.p,{children:"所有的主流浏览器都已经支持，针对一些低版本的浏览器，可以提供一个升级的页面来引导用户升级它的浏览器。"}),"\n",(0,s.jsxs)(r.h2,{id:"可靠性",children:["可靠性",(0,s.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#可靠性",children:"#"})]}),"\n",(0,s.jsxs)(r.p,{children:["从 ",(0,s.jsx)(r.code,{children:"v1.0"}),"、",(0,s.jsx)(r.code,{children:"v2.0"})," 到现在的 ",(0,s.jsx)(r.code,{children:"v3.0"}),"，已经走过了将近 5 年的时光，支持起了公司内部数十个业务的项目，并且不断地推动业务项目的升级。"]})]})}function h(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,i.ah)(),e.components);return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}let t=h;h.__RSPRESS_PAGE_META={},h.__RSPRESS_PAGE_META["guide%2Fstart%2Fintroduction.mdx"]={toc:[{text:"为什么选 Gez",id:"为什么选-gez",depth:2},{text:"调研",id:"调研",depth:2},{text:"定位",id:"定位",depth:2},{text:"模块链接",id:"模块链接",depth:2},{text:"设计理念",id:"设计理念",depth:2},{text:"基础服务集中化",id:"基础服务集中化",depth:3},{text:"统一依赖管理",id:"统一依赖管理",depth:3},{text:"一次发布，全局生效",id:"一次发布全局生效",depth:3},{text:"业务与依赖解耦",id:"业务与依赖解耦",depth:3},{text:"兼容性",id:"兼容性",depth:2},{text:"可靠性",id:"可靠性",depth:2}],title:"介绍",frontmatter:{}}}}]);