"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["779"],{850:function(n,e,t){t.r(e),t.d(e,{default:function(){return s}});var r=t(1549),o=t(6603);function i(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",pre:"pre",code:"code"},(0,o.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"gez",children:["Gez",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#gez",children:"#"})]}),"\n",(0,r.jsxs)(e.h2,{id:"类型",children:["类型",(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#类型",children:"#"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ts",children:"import type { ImportMap } from '@gez/import';\nimport { type App } from './app';\nimport type { ManifestJson } from './manifest-json';\nimport { type ModuleConfig, type ParsedModuleConfig } from './module-config';\nimport { type PackConfig, type ParsedPackConfig } from './pack-config';\nimport { type ProjectPath } from './resolve-path';\n/**\n * 详细说明，请看文档：https://dp-os.github.io/gez/api/gez.html\n */\nexport interface GezOptions {\n    /**\n     * 项目根目录，默认为当前执行命令的目录。\n     */\n    root?: string;\n    /**\n     * 是否是生产环境。\n     */\n    isProd?: boolean;\n    /**\n     * 动态路径的变量占位符。\n     */\n    basePathPlaceholder?: string | false;\n    /**\n     * 模块链接配置。\n     */\n    modules?: ModuleConfig;\n    /**\n     * 是否启用归档，等同于 npm pack。\n     */\n    packs?: PackConfig;\n    /**\n     * 创建开发应用，在执行 dev、build、preview 命令时调用。\n     */\n    createDevApp?: (gez: Gez) => Promise<App>;\n    /**\n     * 创建服务器，执行 dev、build、preview 命令时调用。\n     */\n    createServer?: (gez: Gez) => Promise<void>;\n    /**\n     * gez build 构建完成后，以生产模式执行的钩子。\n     */\n    postCompileProdHook?: (gez: Gez) => Promise<void>;\n}\nexport declare enum COMMAND {\n    dev = \"dev\",\n    build = \"build\",\n    preview = \"preview\",\n    start = \"start\"\n}\nexport declare class Gez {\n    /**\n     * 获取 src/entry.node.ts 文件导出的选项\n     */\n    static getSrcOptions(): Promise<GezOptions>;\n    /**\n     * 获取 dist/node/src/entry.node.js 文件导出的选项\n     */\n    static getDistOptions(): Promise<GezOptions>;\n    private readonly _options;\n    private _app;\n    private _command;\n    /**\n     * 根据传入的 modules 选项解析出来的对象。\n     */\n    readonly moduleConfig: ParsedModuleConfig;\n    readonly packConfig: ParsedPackConfig;\n    constructor(options?: GezOptions);\n    /**\n     * 服务名称，来源于 package.json 文件的 name 字段。\n     */\n    get name(): string;\n    /**\n     * 根据 name 生成的 JS 变量名称。\n     */\n    get varName(): string;\n    /**\n     * 项目根目录。\n     */\n    get root(): string;\n    /**\n     * 是否是生产环境。\n     */\n    get isProd(): boolean;\n    /**\n     * 根据服务名称生成的静态资源基本路径。\n     */\n    get basePath(): string;\n    /**\n     * 动态的 base 地址占位符。\n     */\n    get basePathPlaceholder(): string;\n    /**\n     * 当前执行的命令。\n     */\n    get command(): COMMAND;\n    /**\n     * 全部命令的枚举对象。\n     */\n    get COMMAND(): typeof COMMAND;\n    private get app();\n    /**\n     * 执行下面的命令，会创建服务器。\n     * - gez dev\n     * - gez start\n     * - gez preview\n     */\n    createServer(): Promise<void>;\n    /**\n     * 执行 gez build 命令回调。\n     */\n    postCompileProdHook(): Promise<boolean>;\n    /**\n     * 初始化实例。\n     */\n    init(command: COMMAND): Promise<boolean>;\n    /**\n     * 销毁实例，释放内存。\n     */\n    destroy(): Promise<boolean>;\n    /**\n     * 构建生产代码。\n     */\n    build(): Promise<boolean>;\n    /**\n     * 中间件。\n     */\n    get middleware(): import(\"./middleware\").Middleware;\n    /**\n     * 调用 entry.server.ts 导出的渲染函数。\n     */\n    get render(): (options?: import(\"./render-context\").RenderContextOptions) => Promise<import(\"./render-context\").RenderContext>;\n    /**\n     * 解析项目路径。\n     */\n    resolvePath(projectPath: ProjectPath, ...args: string[]): string;\n    /**\n     * 同步写入一个文件。\n     */\n    writeSync(filepath: string, data: any): void;\n    /**\n     * 异步的读取一个 JSON 文件。\n     */\n    readJsonSync(filename: string): any;\n    /**\n     * 获取全部服务的清单文件。\n     */\n    getManifestList(target: 'client' | 'server'): ManifestJson[];\n    /**\n     * 获取服务端的 importmap 映射文件。\n     */\n    getServerImportMap(): ImportMap;\n}\n\n"})})]})}function a(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,o.ah)(),n.components);return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(i,{...n})}):i(n)}let s=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["api%2Fcore%2Fgez.mdx"]={toc:[{text:"类型",id:"类型",depth:2}],title:"Gez",frontmatter:{}}}}]);