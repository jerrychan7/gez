"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["299"],{7445:function(e,r,n){n.r(r),n.d(r,{default:function(){return s}});var d=n(1549),a=n(6603);function t(e){let r=Object.assign({h1:"h1",a:"a",h2:"h2",pre:"pre",code:"code"},(0,a.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(r.h1,{id:"middleware",children:["Middleware",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#middleware",children:"#"})]}),"\n",(0,d.jsxs)(r.h2,{id:"类型",children:["类型",(0,d.jsx)(r.a,{className:"header-anchor","aria-hidden":"true",href:"#类型",children:"#"})]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-ts",children:"import type { IncomingMessage, ServerResponse } from 'node:http';\nimport type { Gez } from './gez';\nexport type Middleware = (req: IncomingMessage, res: ServerResponse, next: Function) => void;\nexport declare function createMiddleware(gez: Gez): Middleware;\n/**\n * 将多个中间件，合并成一个中间件执行\n * @param middlewares 中间件列表\n * @returns\n */\nexport declare function mergeMiddlewares(middlewares: Middleware[]): Middleware;\n\n"})})]})}function i(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,a.ah)(),e.components);return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(t,{...e})}):t(e)}let s=i;i.__RSPRESS_PAGE_META={},i.__RSPRESS_PAGE_META["api%2Fcore%2Fmiddleware.mdx"]={toc:[{text:"类型",id:"类型",depth:2}],title:"Middleware",frontmatter:{}}}}]);