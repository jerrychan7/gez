[{"id":0,"title":"Gez","content":"#\n\n\nTable of contents#\n\n\nEnumerations#\n\n * PathType\n\n\nClasses#\n\n * Gez\n * RenderContext\n\n\nInterfaces#\n\n * App\n * GezOptions\n * ManifestJson\n * ManifestJsonChunkSizes\n * ManifestJsonChunks\n * ModuleConfig\n * PackConfig\n * ParsedModuleConfig\n * ParsedPackConfig\n * RenderContextOptions\n * RenderFiles\n\n\nType Aliases#\n\n * Middleware\n * ServerRenderHandle\n\n\nFunctions#\n\n * createApp\n * createMiddleware\n * mergeMiddlewares\n * parseModuleConfig\n * parsePackConfig","routePath":"/gez/api/README","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":3},{"text":"Enumerations","id":"enumerations","depth":3,"charIndex":24},{"text":"Classes","id":"classes","depth":3,"charIndex":53},{"text":"Interfaces","id":"interfaces","depth":3,"charIndex":89},{"text":"Type Aliases","id":"type-aliases","depth":3,"charIndex":300},{"text":"Functions","id":"functions","depth":3,"charIndex":353}],"domain":"","frontmatter":{},"version":""},{"id":1,"title":"Class: Gez","content":"#\n\n\nTable of contents#\n\n\nConstructors#\n\n * constructor\n\n\nProperties#\n\n * _app\n * _command\n * _options\n * moduleConfig\n * packConfig\n\n\nAccessors#\n\n * COMMAND\n * app\n * basePath\n * basePathPlaceholder\n * command\n * isProd\n * middleware\n * name\n * render\n * root\n * varName\n\n\nMethods#\n\n * build\n * createServer\n * destroy\n * getManifestList\n * getServerImportMap\n * init\n * postCompileProdHook\n * readJsonSync\n * resolvePath\n * writeSync\n * getDistOptions\n * getSrcOptions\n\n\nConstructors#\n\n\nconstructor#\n\nnew Gez(options?)\n\nParameters#\n\nNAME      TYPE\noptions   GezOptions\n\n\nProperties#\n\n\n_app#\n\nPrivate _app: null | App = null\n\n--------------------------------------------------------------------------------\n\n\n_command#\n\nPrivate _command: null | COMMAND = null\n\n--------------------------------------------------------------------------------\n\n\n_options#\n\nPrivate Readonly _options: GezOptions\n\n--------------------------------------------------------------------------------\n\n\nmoduleConfig#\n\nReadonly moduleConfig: ParsedModuleConfig\n\n根据传入的 modules 选项解析出来的对象。\n\n--------------------------------------------------------------------------------\n\n\npackConfig#\n\nReadonly packConfig: ParsedPackConfig\n\n\nAccessors#\n\n\nCOMMAND#\n\nget COMMAND(): typeof COMMAND\n\n全部命令的枚举对象。\n\nReturns#\n\ntypeof COMMAND\n\n--------------------------------------------------------------------------------\n\n\napp#\n\nPrivate get app(): App\n\nReturns#\n\nApp\n\n--------------------------------------------------------------------------------\n\n\nbasePath#\n\nget basePath(): string\n\n根据服务名称生成的静态资源基本路径。\n\nReturns#\n\nstring\n\n--------------------------------------------------------------------------------\n\n\nbasePathPlaceholder#\n\nget basePathPlaceholder(): string\n\n动态的 base 地址占位符。\n\nReturns#\n\nstring\n\n--------------------------------------------------------------------------------\n\n\ncommand#\n\nget command(): COMMAND\n\n当前执行的命令。\n\nReturns#\n\nCOMMAND\n\n--------------------------------------------------------------------------------\n\n\nisProd#\n\nget isProd(): boolean\n\n是否是生产环境。\n\nReturns#\n\nboolean\n\n--------------------------------------------------------------------------------\n\n\nmiddleware#\n\nget middleware(): Middleware\n\n中间件。\n\nReturns#\n\nMiddleware\n\n--------------------------------------------------------------------------------\n\n\nname#\n\nget name(): string\n\n服务名称，来源于 package.json 文件的 name 字段。\n\nReturns#\n\nstring\n\n--------------------------------------------------------------------------------\n\n\nrender#\n\nget render(): (options?: RenderContextOptions) => Promise<RenderContext>\n\n调用 entry.server.ts 导出的渲染函数。\n\nReturns#\n\nfn\n\n(options?): Promise<RenderContext>\n\n渲染函数\n\nParameters#\n\nNAME       TYPE                   DESCRIPTION\noptions?   RenderContextOptions   透传给 RenderContextOptions\n\nReturns#\n\nPromise<RenderContext>\n\n--------------------------------------------------------------------------------\n\n\nroot#\n\nget root(): string\n\n项目根目录。\n\nReturns#\n\nstring\n\n--------------------------------------------------------------------------------\n\n\nvarName#\n\nget varName(): string\n\n根据 name 生成的 JS 变量名称。\n\nReturns#\n\nstring\n\n\nMethods#\n\n\nbuild#\n\nbuild(): Promise<boolean>\n\n构建生产代码。\n\nReturns#\n\nPromise<boolean>\n\n--------------------------------------------------------------------------------\n\n\ncreateServer#\n\ncreateServer(): Promise<void>\n\n执行下面的命令，会创建服务器。\n\n * gez dev\n * gez start\n * gez preview\n\nReturns#\n\nPromise<void>\n\n--------------------------------------------------------------------------------\n\n\ndestroy#\n\ndestroy(): Promise<boolean>\n\n销毁实例，释放内存。\n\nReturns#\n\nPromise<boolean>\n\n--------------------------------------------------------------------------------\n\n\ngetManifestList#\n\ngetManifestList(target): ManifestJson[]\n\n获取全部服务的清单文件。\n\nParameters#\n\nNAME     TYPE\ntarget   \"client\" | \"server\"\n\nReturns#\n\nManifestJson[]\n\n--------------------------------------------------------------------------------\n\n\ngetServerImportMap#\n\ngetServerImportMap(): ImportMap\n\n获取服务端的 importmap 映射文件。\n\nReturns#\n\nImportMap\n\n--------------------------------------------------------------------------------\n\n\ninit#\n\ninit(command): Promise<boolean>\n\n初始化实例。\n\nParameters#\n\nNAME      TYPE\ncommand   COMMAND\n\nReturns#\n\nPromise<boolean>\n\n--------------------------------------------------------------------------------\n\n\npostCompileProdHook#\n\npostCompileProdHook(): Promise<boolean>\n\n执行 gez build 命令回调。\n\nReturns#\n\nPromise<boolean>\n\n--------------------------------------------------------------------------------\n\n\nreadJsonSync#\n\nreadJsonSync(filename): any\n\n异步的读取一个 JSON 文件。\n\nParameters#\n\nNAME       TYPE\nfilename   string\n\nReturns#\n\nany\n\n--------------------------------------------------------------------------------\n\n\nresolvePath#\n\nresolvePath(projectPath, ...args): string\n\n解析项目路径。\n\nParameters#\n\nNAME          TYPE\nprojectPath   ProjectPath\n...args       string[]\n\nReturns#\n\nstring\n\n--------------------------------------------------------------------------------\n\n\nwriteSync#\n\nwriteSync(filepath, data): void\n\n同步写入一个文件。\n\nParameters#\n\nNAME       TYPE\nfilepath   string\ndata       any\n\nReturns#\n\nvoid\n\n--------------------------------------------------------------------------------\n\n\ngetDistOptions#\n\nStatic getDistOptions(): Promise<GezOptions>\n\n获取 dist/node/src/entry.node.js 文件导出的选项\n\nReturns#\n\nPromise<GezOptions>\n\n--------------------------------------------------------------------------------\n\n\ngetSrcOptions#\n\nStatic getSrcOptions(): Promise<GezOptions>\n\n获取 src/entry.node.ts 文件导出的选项\n\nReturns#\n\nPromise<GezOptions>","routePath":"/gez/api/classes/Gez","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":3},{"text":"Constructors","id":"constructors","depth":3,"charIndex":24},{"text":"Properties","id":"properties","depth":3,"charIndex":56},{"text":"Accessors","id":"accessors","depth":3,"charIndex":133},{"text":"Methods","id":"methods","depth":3,"charIndex":272},{"text":"Constructors","id":"constructors-1","depth":2,"charIndex":471},{"text":"constructor","id":"constructor","depth":3,"charIndex":487},{"text":"Parameters","id":"parameters","depth":4,"charIndex":520},{"text":"Properties","id":"properties-1","depth":2,"charIndex":571},{"text":"_app","id":"_app","depth":3,"charIndex":585},{"text":"_command","id":"_command","depth":3,"charIndex":708},{"text":"_options","id":"_options","depth":3,"charIndex":843},{"text":"moduleConfig","id":"moduleconfig","depth":3,"charIndex":976},{"text":"packConfig","id":"packconfig","depth":3,"charIndex":1143},{"text":"Accessors","id":"accessors-1","depth":2,"charIndex":1196},{"text":"COMMAND","id":"command","depth":3,"charIndex":1209},{"text":"Returns","id":"returns","depth":4,"charIndex":1262},{"text":"app","id":"app","depth":3,"charIndex":1371},{"text":"Returns","id":"returns-1","depth":4,"charIndex":1401},{"text":"basePath","id":"basepath","depth":3,"charIndex":1499},{"text":"Returns","id":"returns-2","depth":4,"charIndex":1554},{"text":"basePathPlaceholder","id":"basepathplaceholder","depth":3,"charIndex":1655},{"text":"Returns","id":"returns-3","depth":4,"charIndex":1729},{"text":"command","id":"command-1","depth":3,"charIndex":-1},{"text":"Returns","id":"returns-4","depth":4,"charIndex":1874},{"text":"isProd","id":"isprod","depth":3,"charIndex":1976},{"text":"Returns","id":"returns-5","depth":4,"charIndex":2018},{"text":"middleware","id":"middleware","depth":3,"charIndex":2120},{"text":"Returns","id":"returns-6","depth":4,"charIndex":2169},{"text":"name","id":"name","depth":3,"charIndex":2274},{"text":"Returns","id":"returns-7","depth":4,"charIndex":2337},{"text":"render","id":"render","depth":3,"charIndex":2438},{"text":"Returns","id":"returns-8","depth":4,"charIndex":2550},{"text":"root","id":"root","depth":3,"charIndex":2842},{"text":"Returns","id":"returns-10","depth":4,"charIndex":2877},{"text":"varName","id":"varname","depth":3,"charIndex":2978},{"text":"Returns","id":"returns-11","depth":4,"charIndex":3033},{"text":"Methods","id":"methods-1","depth":2,"charIndex":3052},{"text":"build","id":"build","depth":3,"charIndex":3063},{"text":"Returns","id":"returns-12","depth":4,"charIndex":3107},{"text":"createServer","id":"createserver","depth":3,"charIndex":3218},{"text":"Returns","id":"returns-13","depth":4,"charIndex":3321},{"text":"destroy","id":"destroy","depth":3,"charIndex":3429},{"text":"Returns","id":"returns-14","depth":4,"charIndex":3480},{"text":"getManifestList","id":"getmanifestlist","depth":3,"charIndex":3591},{"text":"Parameters","id":"parameters-2","depth":4,"charIndex":3664},{"text":"Returns","id":"returns-15","depth":4,"charIndex":3721},{"text":"getServerImportMap","id":"getserverimportmap","depth":3,"charIndex":3830},{"text":"Returns","id":"returns-16","depth":4,"charIndex":3908},{"text":"init","id":"init","depth":3,"charIndex":4012},{"text":"Parameters","id":"parameters-3","depth":4,"charIndex":4060},{"text":"Returns","id":"returns-17","depth":4,"charIndex":4107},{"text":"postCompileProdHook","id":"postcompileprodhook","depth":3,"charIndex":4218},{"text":"Returns","id":"returns-18","depth":4,"charIndex":4301},{"text":"readJsonSync","id":"readjsonsync","depth":3,"charIndex":4412},{"text":"Parameters","id":"parameters-4","depth":4,"charIndex":4474},{"text":"Returns","id":"returns-19","depth":4,"charIndex":4522},{"text":"resolvePath","id":"resolvepath","depth":3,"charIndex":4620},{"text":"Parameters","id":"parameters-5","depth":4,"charIndex":4686},{"text":"Returns","id":"returns-20","depth":4,"charIndex":4768},{"text":"writeSync","id":"writesync","depth":3,"charIndex":4869},{"text":"Parameters","id":"parameters-6","depth":4,"charIndex":4925},{"text":"Returns","id":"returns-21","depth":4,"charIndex":4988},{"text":"getDistOptions","id":"getdistoptions","depth":3,"charIndex":5087},{"text":"Returns","id":"returns-22","depth":4,"charIndex":5190},{"text":"getSrcOptions","id":"getsrcoptions","depth":3,"charIndex":5304},{"text":"Returns","id":"returns-23","depth":4,"charIndex":5395}],"domain":"","frontmatter":{},"version":""},{"id":2,"title":"Class: RenderContext","content":"#\n\n渲染上下文\n\n\nTable of contents#\n\n\nConstructors#\n\n * constructor\n\n\nProperties#\n\n * _html\n * base\n * entryName\n * files\n * gez\n * importMetaSet\n * params\n * redirect\n * status\n\n\nAccessors#\n\n * html\n\n\nMethods#\n\n * commit\n * css\n * importmap\n * moduleEntry\n * modulePreload\n * preload\n * serialize\n * state\n\n\nConstructors#\n\n\nconstructor#\n\nnew RenderContext(gez, options?)\n\nParameters#\n\nNAME      TYPE\ngez       Gez\noptions   RenderContextOptions\n\n\nProperties#\n\n\n_html#\n\nPrivate _html: string = ''\n\n--------------------------------------------------------------------------------\n\n\nbase#\n\nReadonly base: string\n\n参数传入的 base。\n\n--------------------------------------------------------------------------------\n\n\nentryName#\n\nReadonly entryName: string\n\n参数传入的 entryName。\n\n--------------------------------------------------------------------------------\n\n\nfiles#\n\nfiles: RenderFiles\n\nimportMetaSet 收集完成后，调用 rc.commit() 函数时，会更新这个对象的信息。\n\n--------------------------------------------------------------------------------\n\n\ngez#\n\ngez: Gez\n\nGez 的实例。\n\n--------------------------------------------------------------------------------\n\n\nimportMetaSet#\n\nimportMetaSet: Set<ImportMeta>\n\n服务端渲染过程中，收集模块执行过程中的 import.meta 对象。\n\n--------------------------------------------------------------------------------\n\n\nparams#\n\nReadonly params: Record<string, any>\n\n参数传入的 params。\n\n--------------------------------------------------------------------------------\n\n\nredirect#\n\nredirect: null | string = null\n\n重定向地址。\n\n--------------------------------------------------------------------------------\n\n\nstatus#\n\nstatus: null | number = null\n\n响应的状态码。\n\n\nAccessors#\n\n\nhtml#\n\nget html(): string\n\n响应的 html 内容。\n\nReturns#\n\nstring\n\nset html(html): void\n\nParameters#\n\nNAME   TYPE\nhtml   string\n\nReturns#\n\nvoid\n\n\nMethods#\n\n\ncommit#\n\ncommit(): Promise<void>\n\n同构应用渲染完成后，提交模块依赖更新 files 对象。\n\nReturns#\n\nPromise<void>\n\n--------------------------------------------------------------------------------\n\n\ncss#\n\ncss(): string\n\n根据 files 生成服务端首屏加载的 CSS。\n\nReturns#\n\nstring\n\n--------------------------------------------------------------------------------\n\n\nimportmap#\n\nimportmap(): string\n\n根据 files 生成 importmap 相关代码。\n\nReturns#\n\nstring\n\n--------------------------------------------------------------------------------\n\n\nmoduleEntry#\n\nmoduleEntry(): string\n\n根据 files 生成模块入口执行代码。\n\nReturns#\n\nstring\n\n--------------------------------------------------------------------------------\n\n\nmodulePreload#\n\nmodulePreload(): string\n\n根据 files 生成 ESM 模块预加载代码。\n\nReturns#\n\nstring\n\n--------------------------------------------------------------------------------\n\n\npreload#\n\npreload(): string\n\n根据 files 生成 JS 和 CSS 文件的预加载代码。\n\nReturns#\n\nstring\n\n--------------------------------------------------------------------------------\n\n\nserialize#\n\nserialize(input, options?): string\n\n透传 https://github.com/yahoo/serialize-javascript\n\nParameters#\n\nNAME       TYPE\ninput      any\noptions?   SerializeJSOptions\n\nReturns#\n\nstring\n\n--------------------------------------------------------------------------------\n\n\nstate#\n\nstate(varName, data): string\n\n在 window 对象，注入一个 JS 变量对象，data 必须是可以被序列化的。\n\nParameters#\n\nNAME      TYPE\nvarName   string\ndata      Record<string, any>\n\nReturns#\n\nstring","routePath":"/gez/api/classes/RenderContext","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":10},{"text":"Constructors","id":"constructors","depth":3,"charIndex":31},{"text":"Properties","id":"properties","depth":3,"charIndex":63},{"text":"Accessors","id":"accessors","depth":3,"charIndex":173},{"text":"Methods","id":"methods","depth":3,"charIndex":195},{"text":"Constructors","id":"constructors-1","depth":2,"charIndex":302},{"text":"constructor","id":"constructor","depth":3,"charIndex":318},{"text":"Parameters","id":"parameters","depth":4,"charIndex":366},{"text":"Properties","id":"properties-1","depth":2,"charIndex":441},{"text":"_html","id":"_html","depth":3,"charIndex":455},{"text":"base","id":"base","depth":3,"charIndex":574},{"text":"entryName","id":"entryname","depth":3,"charIndex":700},{"text":"files","id":"files","depth":3,"charIndex":841},{"text":"gez","id":"gez","depth":3,"charIndex":1004},{"text":"importMetaSet","id":"importmetaset","depth":3,"charIndex":1113},{"text":"params","id":"params","depth":3,"charIndex":1281},{"text":"redirect","id":"redirect","depth":3,"charIndex":1426},{"text":"status","id":"status","depth":3,"charIndex":1560},{"text":"Accessors","id":"accessors-1","depth":2,"charIndex":1609},{"text":"html","id":"html","depth":3,"charIndex":1622},{"text":"Returns","id":"returns","depth":4,"charIndex":1663},{"text":"Parameters","id":"parameters-1","depth":4,"charIndex":1703},{"text":"Returns","id":"returns-1","depth":4,"charIndex":1743},{"text":"Methods","id":"methods-1","depth":2,"charIndex":1760},{"text":"commit","id":"commit","depth":3,"charIndex":1771},{"text":"Returns","id":"returns-2","depth":4,"charIndex":1835},{"text":"css","id":"css","depth":3,"charIndex":1943},{"text":"Returns","id":"returns-3","depth":4,"charIndex":1990},{"text":"importmap","id":"importmap","depth":3,"charIndex":2091},{"text":"Returns","id":"returns-4","depth":4,"charIndex":2153},{"text":"moduleEntry","id":"moduleentry","depth":3,"charIndex":2254},{"text":"Returns","id":"returns-5","depth":4,"charIndex":2313},{"text":"modulePreload","id":"modulepreload","depth":3,"charIndex":2414},{"text":"Returns","id":"returns-6","depth":4,"charIndex":2481},{"text":"preload","id":"preload","depth":3,"charIndex":2582},{"text":"Returns","id":"returns-7","depth":4,"charIndex":2643},{"text":"serialize","id":"serialize","depth":3,"charIndex":2744},{"text":"Parameters","id":"parameters-2","depth":4,"charIndex":2842},{"text":"Returns","id":"returns-8","depth":4,"charIndex":2917},{"text":"state","id":"state","depth":3,"charIndex":3018},{"text":"Parameters","id":"parameters-3","depth":4,"charIndex":3099},{"text":"Returns","id":"returns-9","depth":4,"charIndex":3175}],"domain":"","frontmatter":{},"version":""},{"id":3,"title":"App","content":"#\n\n\n类型#\n\n","routePath":"/gez/api/core/app","lang":"","toc":[{"text":"类型","id":"类型","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":4,"title":"Gez","content":"#\n\n\n类型#\n\n","routePath":"/gez/api/core/gez","lang":"","toc":[{"text":"类型","id":"类型","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":5,"title":"ManifestJson","content":"#\n\n\n类型#\n\n","routePath":"/gez/api/core/manifest-json","lang":"","toc":[{"text":"类型","id":"类型","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":6,"title":"Middleware","content":"#\n\n\n类型#\n\n","routePath":"/gez/api/core/middleware","lang":"","toc":[{"text":"类型","id":"类型","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":7,"title":"ModuleConfig","content":"#\n\n\n类型#\n\n","routePath":"/gez/api/core/module-config","lang":"","toc":[{"text":"类型","id":"类型","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":8,"title":"PackConfig","content":"#\n\n\n类型#\n\n","routePath":"/gez/api/core/pack-config","lang":"","toc":[{"text":"类型","id":"类型","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":9,"title":"RenderContext","content":"#\n\n\n类型#\n\n","routePath":"/gez/api/core/render-context","lang":"","toc":[{"text":"类型","id":"类型","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":10,"title":"Enumeration: PathType","content":"#\n\n\nTable of contents#\n\n\nEnumeration Members#\n\n * npm\n * root\n\n\nEnumeration Members#\n\n\nnpm#\n\nnpm = \"npm:\"\n\n--------------------------------------------------------------------------------\n\n\nroot#\n\nroot = \"root:\"","routePath":"/gez/api/enums/PathType","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":3},{"text":"Enumeration Members","id":"enumeration-members","depth":3,"charIndex":24},{"text":"Enumeration Members","id":"enumeration-members-1","depth":2,"charIndex":63},{"text":"npm","id":"npm","depth":3,"charIndex":86},{"text":"root","id":"root","depth":3,"charIndex":189}],"domain":"","frontmatter":{},"version":""},{"id":11,"title":"Function: createApp","content":"#\n\ncreateApp(gez): Promise<App>\n\nParameters#\n\nNAME   TYPE\ngez    Gez\n\nReturns#\n\nPromise<App>","routePath":"/gez/api/functions/createApp","lang":"","toc":[{"text":"Parameters","id":"parameters","depth":4,"charIndex":32},{"text":"Returns","id":"returns","depth":4,"charIndex":69}],"domain":"","frontmatter":{},"version":""},{"id":12,"title":"Function: createMiddleware","content":"#\n\ncreateMiddleware(gez): Middleware\n\nParameters#\n\nNAME   TYPE\ngez    Gez\n\nReturns#\n\nMiddleware","routePath":"/gez/api/functions/createMiddleware","lang":"","toc":[{"text":"Parameters","id":"parameters","depth":4,"charIndex":37},{"text":"Returns","id":"returns","depth":4,"charIndex":74}],"domain":"","frontmatter":{},"version":""},{"id":13,"title":"Function: mergeMiddlewares","content":"#\n\nmergeMiddlewares(middlewares): Middleware\n\n将多个中间件，合并成一个中间件执行\n\nParameters#\n\nNAME          TYPE           DESCRIPTION\nmiddlewares   Middleware[]   中间件列表\n\nReturns#\n\nMiddleware","routePath":"/gez/api/functions/mergeMiddlewares","lang":"","toc":[{"text":"Parameters","id":"parameters","depth":4,"charIndex":64},{"text":"Returns","id":"returns","depth":4,"charIndex":154}],"domain":"","frontmatter":{},"version":""},{"id":14,"title":"Function: parseModuleConfig","content":"#\n\nparseModuleConfig(name, root, config?): ParsedModuleConfig\n\n解析模块配置\n\nParameters#\n\nNAME     TYPE           DESCRIPTION\nname     string         当前运行服务的名字\nroot     string         当前运行服务的根路径\nconfig   ModuleConfig   模块的配置\n\nReturns#\n\nParsedModuleConfig","routePath":"/gez/api/functions/parseModuleConfig","lang":"","toc":[{"text":"Parameters","id":"parameters","depth":4,"charIndex":70},{"text":"Returns","id":"returns","depth":4,"charIndex":219}],"domain":"","frontmatter":{},"version":""},{"id":15,"title":"Function: parsePackConfig","content":"#\n\nparsePackConfig(config?): ParsedPackConfig\n\nParameters#\n\nNAME     TYPE\nconfig   PackConfig\n\nReturns#\n\nParsedPackConfig","routePath":"/gez/api/functions/parsePackConfig","lang":"","toc":[{"text":"Parameters","id":"parameters","depth":4,"charIndex":46},{"text":"Returns","id":"returns","depth":4,"charIndex":94}],"domain":"","frontmatter":{},"version":""},{"id":16,"title":"Interface: App","content":"#\n\n\nTable of contents#\n\n\nProperties#\n\n * build\n * destroy\n * middleware\n * render\n\n\nProperties#\n\n\nbuild#\n\nOptional build: () => Promise<boolean>\n\nType declaration#\n\n(): Promise<boolean>\n\n执行构建\n\nReturns#\n\nPromise<boolean>\n\n--------------------------------------------------------------------------------\n\n\ndestroy#\n\nOptional destroy: () => Promise<boolean>\n\nType declaration#\n\n(): Promise<boolean>\n\n销毁实例，释放内存\n\nReturns#\n\nPromise<boolean>\n\n--------------------------------------------------------------------------------\n\n\nmiddleware#\n\nmiddleware: Middleware\n\n中间件列表\n\n--------------------------------------------------------------------------------\n\n\nrender#\n\nrender: (options?: RenderContextOptions) => Promise<RenderContext>\n\nType declaration#\n\n(options?): Promise<RenderContext>\n\n渲染函数\n\nParameters#\n\nNAME       TYPE                   DESCRIPTION\noptions?   RenderContextOptions   透传给 RenderContextOptions\n\nReturns#\n\nPromise<RenderContext>","routePath":"/gez/api/interfaces/App","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":3},{"text":"Properties","id":"properties","depth":3,"charIndex":24},{"text":"Properties","id":"properties-1","depth":2,"charIndex":83},{"text":"build","id":"build","depth":3,"charIndex":97},{"text":"Type declaration","id":"type-declaration","depth":4,"charIndex":145},{"text":"destroy","id":"destroy","depth":3,"charIndex":303},{"text":"Type declaration","id":"type-declaration-1","depth":4,"charIndex":355},{"text":"middleware","id":"middleware","depth":3,"charIndex":518},{"text":"render","id":"render","depth":3,"charIndex":645},{"text":"Type declaration","id":"type-declaration-2","depth":4,"charIndex":722}],"domain":"","frontmatter":{},"version":""},{"id":17,"title":"Interface: GezOptions","content":"#\n\n详细说明，请看文档：https://dp-os.github.io/gez/api/gez.html\n\n\nTable of contents#\n\n\nProperties#\n\n * basePathPlaceholder\n * createDevApp\n * createServer\n * isProd\n * modules\n * packs\n * postCompileProdHook\n * root\n\n\nProperties#\n\n\nbasePathPlaceholder#\n\nOptional basePathPlaceholder: string | false\n\n动态路径的变量占位符。\n\n--------------------------------------------------------------------------------\n\n\ncreateDevApp#\n\nOptional createDevApp: (gez: Gez) => Promise<App>\n\nType declaration#\n\n(gez): Promise<App>\n\n创建开发应用，在执行 dev、build、preview 命令时调用。\n\nParameters#\n\nNAME   TYPE\ngez    Gez\n\nReturns#\n\nPromise<App>\n\n--------------------------------------------------------------------------------\n\n\ncreateServer#\n\nOptional createServer: (gez: Gez) => Promise<void>\n\nType declaration#\n\n(gez): Promise<void>\n\n创建服务器，执行 dev、build、preview 命令时调用。\n\nParameters#\n\nNAME   TYPE\ngez    Gez\n\nReturns#\n\nPromise<void>\n\n--------------------------------------------------------------------------------\n\n\nisProd#\n\nOptional isProd: boolean\n\n是否是生产环境。\n\n--------------------------------------------------------------------------------\n\n\nmodules#\n\nOptional modules: ModuleConfig\n\n模块链接配置。\n\n--------------------------------------------------------------------------------\n\n\npacks#\n\nOptional packs: PackConfig\n\n是否启用归档，等同于 npm pack。\n\n--------------------------------------------------------------------------------\n\n\npostCompileProdHook#\n\nOptional postCompileProdHook: (gez: Gez) => Promise<void>\n\nType declaration#\n\n(gez): Promise<void>\n\ngez build 构建完成后，以生产模式执行的钩子。\n\nParameters#\n\nNAME   TYPE\ngez    Gez\n\nReturns#\n\nPromise<void>\n\n--------------------------------------------------------------------------------\n\n\nroot#\n\nOptional root: string\n\n项目根目录，默认为当前执行命令的目录。","routePath":"/gez/api/interfaces/GezOptions","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":55},{"text":"Properties","id":"properties","depth":3,"charIndex":76},{"text":"Properties","id":"properties-1","depth":2,"charIndex":207},{"text":"basePathPlaceholder","id":"basepathplaceholder","depth":3,"charIndex":221},{"text":"createDevApp","id":"createdevapp","depth":3,"charIndex":385},{"text":"Type declaration","id":"type-declaration","depth":4,"charIndex":451},{"text":"createServer","id":"createserver","depth":3,"charIndex":672},{"text":"Type declaration","id":"type-declaration-1","depth":4,"charIndex":739},{"text":"isProd","id":"isprod","depth":3,"charIndex":960},{"text":"modules","id":"modules","depth":3,"charIndex":1088},{"text":"packs","id":"packs","depth":3,"charIndex":1222},{"text":"postCompileProdHook","id":"postcompileprodhook","depth":3,"charIndex":1363},{"text":"Type declaration","id":"type-declaration-2","depth":4,"charIndex":1444},{"text":"root","id":"root","depth":3,"charIndex":1659}],"domain":"","frontmatter":{},"version":""},{"id":18,"title":"Interface: ManifestJson","content":"#\n\n\nTable of contents#\n\n\nProperties#\n\n * buildFiles\n * chunks\n * exports\n * hash\n * name\n * type\n * version\n\n\nProperties#\n\n\nbuildFiles#\n\nbuildFiles: string[]\n\n构建的全部文件清单\n\n--------------------------------------------------------------------------------\n\n\nchunks#\n\nchunks: Record<string, ManifestJsonChunks>\n\n编译的文件信息 类型：Record<源文件, 编译信息>\n\n--------------------------------------------------------------------------------\n\n\nexports#\n\nexports: Record<string, string>\n\n对外导出的文件\n\n--------------------------------------------------------------------------------\n\n\nhash#\n\nhash: string\n\n构建的版本号\n\n--------------------------------------------------------------------------------\n\n\nname#\n\nname: string\n\n服务名字，来自于：GezOptions.name\n\n--------------------------------------------------------------------------------\n\n\ntype#\n\ntype: \"module\"\n\n模块系统\n\n--------------------------------------------------------------------------------\n\n\nversion#\n\nversion: string\n\n版本号，默认为 1.0.0","routePath":"/gez/api/interfaces/ManifestJson","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":3},{"text":"Properties","id":"properties","depth":3,"charIndex":24},{"text":"Properties","id":"properties-1","depth":2,"charIndex":109},{"text":"buildFiles","id":"buildfiles","depth":3,"charIndex":123},{"text":"chunks","id":"chunks","depth":3,"charIndex":252},{"text":"exports","id":"exports","depth":3,"charIndex":418},{"text":"hash","id":"hash","depth":3,"charIndex":553},{"text":"name","id":"name","depth":3,"charIndex":665},{"text":"type","id":"type","depth":3,"charIndex":795},{"text":"version","id":"version","depth":3,"charIndex":907}],"domain":"","frontmatter":{},"version":""},{"id":19,"title":"Interface: ManifestJsonChunkSizes","content":"#\n\n\nTable of contents#\n\n\nProperties#\n\n * css\n * js\n * resource\n\n\nProperties#\n\n\ncss#\n\ncss: number\n\n--------------------------------------------------------------------------------\n\n\njs#\n\njs: number\n\n--------------------------------------------------------------------------------\n\n\nresource#\n\nresource: number","routePath":"/gez/api/interfaces/ManifestJsonChunkSizes","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":3},{"text":"Properties","id":"properties","depth":3,"charIndex":24},{"text":"Properties","id":"properties-1","depth":2,"charIndex":64},{"text":"css","id":"css","depth":3,"charIndex":78},{"text":"js","id":"js","depth":3,"charIndex":180},{"text":"resource","id":"resource","depth":3,"charIndex":280}],"domain":"","frontmatter":{},"version":""},{"id":20,"title":"Interface: ManifestJsonChunks","content":"#\n\n\nTable of contents#\n\n\nProperties#\n\n * css\n * js\n * resources\n * sizes\n\n\nProperties#\n\n\ncss#\n\ncss: string[]\n\n当前编译的 CSS 文件。\n\n--------------------------------------------------------------------------------\n\n\njs#\n\njs: string\n\n当前编译的 JS 文件。\n\n--------------------------------------------------------------------------------\n\n\nresources#\n\nresources: string[]\n\n其它的资源文件。\n\n--------------------------------------------------------------------------------\n\n\nsizes#\n\nsizes: ManifestJsonChunkSizes\n\n构建产物的大小。","routePath":"/gez/api/interfaces/ManifestJsonChunks","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":3},{"text":"Properties","id":"properties","depth":3,"charIndex":24},{"text":"Properties","id":"properties-1","depth":2,"charIndex":74},{"text":"css","id":"css","depth":3,"charIndex":88},{"text":"js","id":"js","depth":3,"charIndex":207},{"text":"resources","id":"resources","depth":3,"charIndex":321},{"text":"sizes","id":"sizes","depth":3,"charIndex":447}],"domain":"","frontmatter":{},"version":""},{"id":21,"title":"Interface: ModuleConfig","content":"#\n\n\nTable of contents#\n\n\nProperties#\n\n * exports\n * externals\n * imports\n\n\nProperties#\n\n\nexports#\n\nOptional exports: string[]\n\n对外导出的文件 必须以 npm: 或 root: 开头 npm:开头代表 node_modules 的依赖 root:开头代表项目内root目录下的文件 例如:\nnpm:vue root:src/routes root:src/[filename]\n\n--------------------------------------------------------------------------------\n\n\nexternals#\n\nOptional externals: Record<string, string>\n\n设置项目的外部依赖 例如： { \"vue\": \"ssr-npm/vue\" }\n\n--------------------------------------------------------------------------------\n\n\nimports#\n\nOptional imports: Record<string, string>\n\n导入的模块基本配置","routePath":"/gez/api/interfaces/ModuleConfig","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":3},{"text":"Properties","id":"properties","depth":3,"charIndex":24},{"text":"Properties","id":"properties-1","depth":2,"charIndex":74},{"text":"exports","id":"exports","depth":3,"charIndex":88},{"text":"externals","id":"externals","depth":3,"charIndex":335},{"text":"imports","id":"imports","depth":3,"charIndex":514}],"domain":"","frontmatter":{},"version":""},{"id":22,"title":"Interface: PackConfig","content":"#\n\n\nTable of contents#\n\n\nProperties#\n\n * enable\n * onAfter\n * onBefore\n * outputs\n * packageJson\n * releaseType\n\n\nProperties#\n\n\nenable#\n\nOptional enable: boolean\n\n是否启用归档\n\n--------------------------------------------------------------------------------\n\n\nonAfter#\n\nOptional onAfter: (gez: Gez, pkgJson: Record<string, any>, file: Buffer) =>\nPromise<void>\n\nType declaration#\n\n(gez, pkgJson, file): Promise<void>\n\nParameters#\n\nNAME      TYPE\ngez       Gez\npkgJson   Record<string, any>\nfile      Buffer\n\nReturns#\n\nPromise<void>\n\n--------------------------------------------------------------------------------\n\n\nonBefore#\n\nOptional onBefore: (gez: Gez, pkgJson: Record<string, any>) => Promise<void>\n\nType declaration#\n\n(gez, pkgJson): Promise<void>\n\nParameters#\n\nNAME      TYPE\ngez       Gez\npkgJson   Record<string, any>\n\nReturns#\n\nPromise<void>\n\n--------------------------------------------------------------------------------\n\n\noutputs#\n\nOptional outputs: string | boolean | string[]\n\n输出的文件\n\n--------------------------------------------------------------------------------\n\n\npackageJson#\n\nOptional packageJson: (gez: Gez, pkgJson: Record<string, any>) =>\nPromise<Record<string, any>>\n\nType declaration#\n\n(gez, pkgJson): Promise<Record<string, any>>\n\nParameters#\n\nNAME      TYPE\ngez       Gez\npkgJson   Record<string, any>\n\nReturns#\n\nPromise<Record<string, any>>\n\n--------------------------------------------------------------------------------\n\n\nreleaseType#\n\nOptional releaseType: \"major\" | \"premajor\" | \"minor\" | \"preminor\" | \"patch\" |\n\"prepatch\" | \"prerelease\"\n\n发布的类型 环境变量设置：process.env.RELEASE_TYPE","routePath":"/gez/api/interfaces/PackConfig","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":3},{"text":"Properties","id":"properties","depth":3,"charIndex":24},{"text":"Properties","id":"properties-1","depth":2,"charIndex":113},{"text":"enable","id":"enable","depth":3,"charIndex":127},{"text":"onAfter","id":"onafter","depth":3,"charIndex":253},{"text":"Type declaration","id":"type-declaration","depth":4,"charIndex":354},{"text":"onBefore","id":"onbefore","depth":3,"charIndex":608},{"text":"Type declaration","id":"type-declaration-1","depth":4,"charIndex":697},{"text":"outputs","id":"outputs","depth":3,"charIndex":928},{"text":"packageJson","id":"packagejson","depth":3,"charIndex":1075},{"text":"Type declaration","id":"type-declaration-2","depth":4,"charIndex":1185},{"text":"releaseType","id":"releasetype","depth":3,"charIndex":1446}],"domain":"","frontmatter":{},"version":""},{"id":23,"title":"Interface: ParsedModuleConfig","content":"#\n\n\nTable of contents#\n\n\nProperties#\n\n * exports\n * externals\n * imports\n * name\n * root\n\n\nProperties#\n\n\nexports#\n\nexports: { exportName: string ; exportPath: string ; externalName: string ;\nimportName: string ; name: string ; type: PathType }[]\n\n对外导出的文件\n\n--------------------------------------------------------------------------------\n\n\nexternals#\n\nexternals: Record<string, { import?: string ; match: RegExp }>\n\n外部依赖\n\n--------------------------------------------------------------------------------\n\n\nimports#\n\nimports: { localPath: string ; name: string }[]\n\n导入的外部服务\n\n--------------------------------------------------------------------------------\n\n\nname#\n\nname: string\n\n当前的服务名字\n\n--------------------------------------------------------------------------------\n\n\nroot#\n\nroot: string\n\n当前服务运行的根目录","routePath":"/gez/api/interfaces/ParsedModuleConfig","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":3},{"text":"Properties","id":"properties","depth":3,"charIndex":24},{"text":"Properties","id":"properties-1","depth":2,"charIndex":90},{"text":"exports","id":"exports","depth":3,"charIndex":104},{"text":"externals","id":"externals","depth":3,"charIndex":338},{"text":"imports","id":"imports","depth":3,"charIndex":503},{"text":"name","id":"name","depth":3,"charIndex":654},{"text":"root","id":"root","depth":3,"charIndex":767}],"domain":"","frontmatter":{},"version":""},{"id":24,"title":"Interface: ParsedPackConfig","content":"#\n\n\nTable of contents#\n\n\nProperties#\n\n * enable\n * onAfter\n * onBefore\n * outputs\n * packageJson\n\n\nProperties#\n\n\nenable#\n\nenable: boolean\n\n--------------------------------------------------------------------------------\n\n\nonAfter#\n\nonAfter: (gez: Gez, pkgJson: Record<string, any>, file: Buffer) => Promise<void>\n\nType declaration#\n\n(gez, pkgJson, file): Promise<void>\n\nParameters#\n\nNAME      TYPE\ngez       Gez\npkgJson   Record<string, any>\nfile      Buffer\n\nReturns#\n\nPromise<void>\n\n--------------------------------------------------------------------------------\n\n\nonBefore#\n\nonBefore: (gez: Gez, pkgJson: Record<string, any>) => Promise<void>\n\nType declaration#\n\n(gez, pkgJson): Promise<void>\n\nParameters#\n\nNAME      TYPE\ngez       Gez\npkgJson   Record<string, any>\n\nReturns#\n\nPromise<void>\n\n--------------------------------------------------------------------------------\n\n\noutputs#\n\noutputs: string[]\n\n--------------------------------------------------------------------------------\n\n\npackageJson#\n\npackageJson: (gez: Gez, pkgJson: Record<string, any>) => Promise<Record<string,\nany>>\n\nType declaration#\n\n(gez, pkgJson): Promise<Record<string, any>>\n\nParameters#\n\nNAME      TYPE\ngez       Gez\npkgJson   Record<string, any>\n\nReturns#\n\nPromise<Record<string, any>>","routePath":"/gez/api/interfaces/ParsedPackConfig","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":3},{"text":"Properties","id":"properties","depth":3,"charIndex":24},{"text":"Properties","id":"properties-1","depth":2,"charIndex":98},{"text":"enable","id":"enable","depth":3,"charIndex":112},{"text":"onAfter","id":"onafter","depth":3,"charIndex":221},{"text":"Type declaration","id":"type-declaration","depth":4,"charIndex":313},{"text":"onBefore","id":"onbefore","depth":3,"charIndex":567},{"text":"Type declaration","id":"type-declaration-1","depth":4,"charIndex":647},{"text":"outputs","id":"outputs","depth":3,"charIndex":878},{"text":"packageJson","id":"packagejson","depth":3,"charIndex":990},{"text":"Type declaration","id":"type-declaration-2","depth":4,"charIndex":1091}],"domain":"","frontmatter":{},"version":""},{"id":25,"title":"Interface: RenderContextOptions","content":"#\n\n渲染的参数\n\n\nTable of contents#\n\n\nProperties#\n\n * base\n * entryName\n * params\n\n\nProperties#\n\n\nbase#\n\nOptional base: string\n\n静态资产的公共路径，可以根据业务的上下文来动态设置不同的路径。\n\n--------------------------------------------------------------------------------\n\n\nentryName#\n\nOptional entryName: string\n\ngez.render() 函数执行时，会调用 entry.server.ts 文件导出的名称。\n\n--------------------------------------------------------------------------------\n\n\nparams#\n\nOptional params: Record<string, any>\n\n传递给 RenderContext 对象的 params 字段。","routePath":"/gez/api/interfaces/RenderContextOptions","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":10},{"text":"Properties","id":"properties","depth":3,"charIndex":31},{"text":"Properties","id":"properties-1","depth":2,"charIndex":77},{"text":"base","id":"base","depth":3,"charIndex":91},{"text":"entryName","id":"entryname","depth":3,"charIndex":237},{"text":"params","id":"params","depth":3,"charIndex":409}],"domain":"","frontmatter":{},"version":""},{"id":26,"title":"Interface: RenderFiles","content":"#\n\n当前页面渲染的文件\n\n\nTable of contents#\n\n\nProperties#\n\n * css\n * importmap\n * js\n * modulepreload\n * resources\n\n\nProperties#\n\n\ncss#\n\ncss: string[]\n\nCSS 文件列表。\n\n--------------------------------------------------------------------------------\n\n\nimportmap#\n\nimportmap: string[]\n\nimportmap.js 文件列表。\n\n--------------------------------------------------------------------------------\n\n\njs#\n\njs: string[]\n\n全部的 JS 文件列表，包含 modulepreload 和 importmap。\n\n--------------------------------------------------------------------------------\n\n\nmodulepreload#\n\nmodulepreload: string[]\n\nESM 模块列表。\n\n--------------------------------------------------------------------------------\n\n\nresources#\n\nresources: string[]\n\n除了 JS 和 CSS 之外的其它文件列表。","routePath":"/gez/api/interfaces/RenderFiles","lang":"","toc":[{"text":"Table of contents","id":"table-of-contents","depth":2,"charIndex":14},{"text":"Properties","id":"properties","depth":3,"charIndex":35},{"text":"Properties","id":"properties-1","depth":2,"charIndex":106},{"text":"css","id":"css","depth":3,"charIndex":120},{"text":"importmap","id":"importmap","depth":3,"charIndex":235},{"text":"js","id":"js","depth":3,"charIndex":371},{"text":"modulepreload","id":"modulepreload","depth":3,"charIndex":516},{"text":"resources","id":"resources","depth":3,"charIndex":651}],"domain":"","frontmatter":{},"version":""},{"id":27,"title":"Vue","content":"#\n\n\n类型#\n\n","routePath":"/gez/api/rspack-vue/vue","lang":"","toc":[{"text":"类型","id":"类型","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":28,"title":"App","content":"#\n\n\n类型#\n\n","routePath":"/gez/api/rspack/app","lang":"","toc":[{"text":"类型","id":"类型","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":29,"title":"BuildTarget","content":"#\n\n\n类型#\n\n","routePath":"/gez/api/rspack/build-target","lang":"","toc":[{"text":"类型","id":"类型","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":30,"title":"HtmlApp","content":"#\n\n\n类型#\n\n","routePath":"/gez/api/rspack/html-app","lang":"","toc":[{"text":"类型","id":"类型","depth":2,"charIndex":3}],"domain":"","frontmatter":{},"version":""},{"id":31,"title":"Type alias: Middleware","content":"#\n\nMiddleware: (req: IncomingMessage, res: ServerResponse, next: Function) => void\n\nType declaration#\n\n(req, res, next): void\n\nParameters#\n\nNAME   TYPE\nreq    IncomingMessage\nres    ServerResponse\nnext   Function\n\nReturns#\n\nvoid","routePath":"/gez/api/types/Middleware","lang":"","toc":[{"text":"Type declaration","id":"type-declaration","depth":4,"charIndex":83}],"domain":"","frontmatter":{},"version":""},{"id":32,"title":"Type alias: ServerRenderHandle","content":"#\n\nServerRenderHandle: (render: RenderContext) => Promise<void>\n\nType declaration#\n\n(render): Promise<void>\n\n服务端渲染处理函数。\n\nParameters#\n\nNAME     TYPE\nrender   RenderContext\n\nReturns#\n\nPromise<void>","routePath":"/gez/api/types/ServerRenderHandle","lang":"","toc":[{"text":"Type declaration","id":"type-declaration","depth":4,"charIndex":64}],"domain":"","frontmatter":{},"version":""},{"id":33,"title":"路径别名","content":"#\n\n路径别名允许开发者为模块定义别名，以便于在代码中更方便的引用它们。当你想要使用一个简短、易于记忆的名称来代替冗长复杂的路径时，这将非常有用。\n\n\n默认别名#\n\n在 Gez 中，默认使用服务名来作为别名，这样有两个好处。\n\n * 在调用其它服务时保持命名风格的统一\n * 执行 npm run build:dts 命令，生成的类型可以被其它服务使用。\n\n\npackage.json#\n\n\n\n程序会读取 package.json 的 name 字段，设置别名为 ssr-module-auth。\n\n\ntsconfig.json#\n\n同时还需要在 tsconfig.json 配置别名。\n\n\n\n\n自定义别名#\n\n业务模块，你应该总是使用默认的别名，但是一些第三方包有时需要设置别名，你可以这样做。\n\n\n\nWARNING\n\n业务模块对外导出时，程序会做一些打包的优化。如果你自定义了业务模块的别名，可能会导致打包出来的内容不正确。","routePath":"/gez/guide/essentials/alias","lang":"","toc":[{"text":"默认别名","id":"默认别名","depth":2,"charIndex":75},{"text":"package.json","id":"packagejson","depth":3,"charIndex":179},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":250},{"text":"自定义别名","id":"自定义别名","depth":2,"charIndex":297}],"domain":"","frontmatter":{},"version":""},{"id":34,"title":"基本路径","content":"#\n\n\n默认路径#\n\n静态资产的文件路径，总是会读取 package.json 的 name 来生成固定的路径：/${name}/。\n\n\nsrc/entry.node.ts#\n\n\n\n\n动态路径#\n\n有时，我们将一套代码部署在不同的国家或地区的集群中，允许独立域名访问和二级目录访问。\n\n\n二级目录#\n\n * 主域名.com -> 默认主站\n * 主域名.com/cn/ -> 中文站点\n * 主域名.com/en/ -> 英文站点\n\n\n\n\n独立站点#\n\n * 主域名.com -> 默认主站\n * cn.域名.com -> 中文站点\n * en.域名.com -> 英文站点\n\n\n动态传参#\n\n你可以根据请求上下文，在给渲染函数传入不同的基本 URL。\n\n\n\n实现原理\n\n在服务端，静态资产文件的编译路径为 [[[___GEZ_DYNAMIC_BASE___]]]/${name}/，程序会将你返回的 html 中的\n[[[___GEZ_DYNAMIC_BASE___]]] 占位符替换成你传入的 base。","routePath":"/gez/guide/essentials/base-path","lang":"","toc":[{"text":"默认路径","id":"默认路径","depth":2,"charIndex":3},{"text":"src/entry.node.ts","id":"srcentrynodets","depth":3,"charIndex":68},{"text":"动态路径","id":"动态路径","depth":2,"charIndex":91},{"text":"二级目录","id":"二级目录","depth":3,"charIndex":143},{"text":"独立站点","id":"独立站点","depth":3,"charIndex":219},{"text":"动态传参","id":"动态传参","depth":3,"charIndex":289}],"domain":"","frontmatter":{},"version":""},{"id":35,"title":"常见命令","content":"#\n\n一个典型的命令配置。\n\n\n\nTIP\n\n你需要手动配置 tsconfig.json 文件，否则执行 build:dts 命令会报错。\n\n\ngez dev#\n\n本地开发时启动。\n\nTIP\n\n如果链接的服务是一个本地的目录，你也可以把该服务跑起来快速的开发调试。\n\n\n\n\ngez build#\n\n构建生产代码\n\nTIP\n\n有三个产物，分别是 client、server、node。\n\n\ngez preview#\n\n等同于执行 gez build && gez start\n\n\ngez start#\n\n运行生产环境代码。\n\nTIP\n\n开发环境中，所依赖的外部服务代码变更，总是会获得热更新，但是在生产环境中是没有热更新的。\n\n如果依赖的服务发布更新了，你需要手动重启一下服务，或者编写一个脚本，监听其它服务版本发布来重启服务。","routePath":"/gez/guide/essentials/command","lang":"","toc":[{"text":"gez dev","id":"gez-dev","depth":2,"charIndex":70},{"text":"gez build","id":"gez-build","depth":2,"charIndex":135},{"text":"gez preview","id":"gez-preview","depth":2,"charIndex":192},{"text":"gez start","id":"gez-start","depth":2,"charIndex":237}],"domain":"","frontmatter":{},"version":""},{"id":36,"title":"基础配置","content":"#\n\nGez 作为基础设施，它的配置总是非常简单的。\n\n\n使用#\n\n\n\n\n选项#\n\n\nname #\n\n * 类型：string\n * 默认值：gez\n * 描述： 服务的名称，全局唯一。\n\n\n\nTIP\n\n如果你的网站，同一个域名下，使用 Gez 打包了多个项目，那么你需要配置一个 name 来区分不同的项目。\n\n\nroot #\n\n * 类型：string\n\n * 默认值：cwd()\n\n * 描述： 项目根目录，默认为当前执行命令的目录。\n\nWARNING\n\n如果你没有充足的理由，你都不应该配置它。\n\n\nisProd #\n\n * 类型：boolean\n * 默认值： process.env.NODE_ENV === 'production'\n * 描述： 是否是生产环境。\n\nWARNING\n\n如果你没有充足的理由，你都不应该配置它。\n\n\nisInstall #\n\n * 类型：boolean\n * 默认值： process.env.npm_config_production !== 'true'\n * 描述： 安装生产依赖时，是否安装远程依赖。\n\nWARNING\n\n如果你没有充足的理由，你都不应该配置它。\n\n\nbasePathPlaceholder #\n\n * 类型：string | false\n * 默认值： [[[___GEZ_DYNAMIC_BASE___]]]\n * 描述： 动态路径的变量占位符，深入了解请看基本路径说明。\n\nWARNING\n\n如果你的业务上，没有出现用户的内容被误替换，你都不应该配置它。\n\n\n模块链接#\n\n这是 Gez 的核心功能，点击这里深入了解。\n\n\nmodules.exports #\n\n * 类型：string[]\n * 默认值： []\n * 描述： 对外模块导出。\n\n\n\nTIP\n\n你可以将当前项目的模块或者当前项目的第三方依赖，对外导出，这样其它服务就可以使用了。\n\n\nmodules.imports #\n\n * 类型：Record\n * 默认值： {}\n * 描述： 配置远程依赖。\n\n\n\nTIP\n * 第一个参数为本地的存储路径\n * 第二个参数是远程依赖的地址\n * 执行 gez install 命令可以下载远程依赖到本地的地址。\n\n你也可以直接配置本地地址。\n\n\n\n\nmodules.externals #\n\n * 类型：Record\n * 默认值： {}\n * 描述： 外部依赖设置，你可以将当前服务的依赖，指向到其它导出的服务。\n\n\n\nWARNING\n\n需要先配置对应服务的 modules.imports，否则运行起来会报错，提示找不到模块。\n\n\n钩子#\n\n\ncreateDevApp() #\n\n * 类型：(gez: Gez) => Promise\n * 默认值： isProd = false\n * 描述： 创建开发应用，在执行 dev、build、preview 命令时调用。\n\n\n\nTIP\n * Rspack 配置请看这里\n\n\ncreateServer() #\n\n * 类型：(gez: Gez) => Promise\n * 默认值： undefined\n * 描述： 创建服务器，执行 dev、build、preview 命令时调用。\n\n\n\nTIP\n\n你也可以使用其它的框架来创建服务器，例如：Express。\n\n\npostCompileProdHook() #\n\n * 类型：(gez: Gez) => Promise\n * 默认值： undefined\n * 描述： gez build 构建完成后，以生产模式执行的钩子。\n\n\n\nTIP\n\n你可以使用这个钩子来生成静态网站。","routePath":"/gez/guide/essentials/config","lang":"","toc":[{"text":"使用","id":"使用","depth":2,"charIndex":28},{"text":"选项","id":"选项","depth":2,"charIndex":36},{"text":"name","id":"name","depth":3,"charIndex":-1},{"text":"root","id":"root","depth":3,"charIndex":-1},{"text":"isProd","id":"isprod","depth":3,"charIndex":-1},{"text":"isInstall","id":"isinstall","depth":3,"charIndex":-1},{"text":"basePathPlaceholder","id":"basepathplaceholder","depth":3,"charIndex":-1},{"text":"模块链接","id":"模块链接","depth":2,"charIndex":667},{"text":"modules.exports","id":"modulesexports","depth":3,"charIndex":-1},{"text":"modules.imports","id":"modulesimports","depth":3,"charIndex":-1},{"text":"modules.externals","id":"modulesexternals","depth":3,"charIndex":-1},{"text":"钩子","id":"钩子","depth":2,"charIndex":1109},{"text":"createDevApp()","id":"createdevapp","depth":3,"charIndex":-1},{"text":"createServer()","id":"createserver","depth":3,"charIndex":-1},{"text":"postCompileProdHook()","id":"postcompileprodhook","depth":3,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":37,"title":"客户端渲染","content":"\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/gez/guide/essentials/csr","lang":"","toc":[{"text":"客户端模板","id":"客户端模板","depth":2,"charIndex":-1},{"text":"构建时生成 index.html","id":"构建时生成-indexhtml","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":38,"title":"模块链接","content":"#\n\n我们假设有三个服务，分别是 ssr-base、ssr-module-auth、ssr-main，其中\n\n * ssr-base 基础服务，负责第三方依赖的管理，以及提供基础的业务组件、工具函数。\n\n * ssr-module-auth\n   业务服务，按照业务模块来拆分服务，这里是负责用户认证相关，包含登录、注册、找回密码、验证码相关，最终对外会导出一个路由的配置文件。\n\n * ssr-main 聚合服务，将不同业务服务导出的路由配置注册进路由总线中，实现应用程序的聚合。\n\n\n基本概念#\n\n\nRemote#\n\n * 定义：提供远程模块供其他应用使用的应用。\n * 功能：导出自己的模块，以便其他应用可以动态加载和运行。\n * 特点：独立、灵活，可独立更新和扩展，共享依赖以优化资源加载。\n\n\nHost#\n\n * 定义：加载并运行远程模块的应用，通常作为微前端架构的宿主。\n * 功能：动态加载 Remote 应用提供的模块，并在需要的地方导入和使用。\n * 特点：整合能力强，能将多个 Remote 应用组合成完整前端应用，提供扩展点和钩子函数。\n\nTIP\n\n每一个服务，既可以是 Host，也可以是 Remote。下面将会以 ssr-base 和 ssr-main 作为例子，分别扮演 Remote 和\nHost，你将会了解到它是如何工作的。\n\n\n无类型导出#\n\n在执行 tsc --declaration --emitDeclarationOnly --outDir dist/src 命令时，由于找不到\nnpm/axios.ts 这个文件，所以不会生成类型文件。\n\n\nRemote#\n\n直接将 axios 模块导出。\n\n\n\n\nHost#\n\nssr-main 此时作为 Host，需要将 axios 链接到 ssr-base/npm/axios，并且需要在项目安装 axios 模块来获得类型提示。\n\n\n\n源码：\n\n\n\n将会被替换成：\n\n\n\n\n有类型导出#\n\n在执行 tsc --declaration --emitDeclarationOnly --outDir dist/src 命令时，由于存在\nsrc/axios.ts 这个文件，就会生成相关的类型文件。\n\n\nRemote#\n\n创建文件，并导出 axios。\n\n\n\n导出 axios 软件包。\n\n\n\n\nHost#\n\nssr-main 此时作为 Host，需要导入 ssr-base 服务。\n\n\n\n此时，你在业务代码中将会获得类型提示。\n\n\n\nTIP\n\n如果要考虑到老系统需要迁移，你还是可以选择将 axios 替换成 ssr-base/src/axios，并且需要安装 axios\n模块到当前项目下才能获得类型提示。\n\n\n\n\n软件包发布#\n\npacks.enable 配置为 true 时，在编译完成后，会将 dist 目录进行归档，写入到\ndist/client/versions/latest.tgz\n\n\n\nWARNING\n\n未完待续！","routePath":"/gez/guide/essentials/module-link","lang":"","toc":[{"text":"基本概念","id":"基本概念","depth":2,"charIndex":243},{"text":"Remote","id":"remote","depth":3,"charIndex":251},{"text":"Host","id":"host","depth":3,"charIndex":351},{"text":"无类型导出","id":"无类型导出","depth":2,"charIndex":580},{"text":"Remote","id":"remote-1","depth":3,"charIndex":692},{"text":"Host","id":"host-1","depth":3,"charIndex":721},{"text":"有类型导出","id":"有类型导出","depth":2,"charIndex":829},{"text":"Remote","id":"remote-2","depth":3,"charIndex":941},{"text":"Host","id":"host-2","depth":3,"charIndex":987},{"text":"软件包发布","id":"软件包发布","depth":2,"charIndex":1149}],"domain":"","frontmatter":{},"version":""},{"id":39,"title":"渲染上下文","content":"${html} ${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/gez/guide/essentials/render-context","lang":"","toc":[{"text":"基本传参","id":"基本传参","depth":2,"charIndex":-1},{"text":"模块依赖收集","id":"模块依赖收集","depth":2,"charIndex":-1},{"text":"Vue2 例子","id":"vue2-例子","depth":3,"charIndex":-1},{"text":"深入了解","id":"深入了解","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":40,"title":"Rspack","content":"#\n\nGez 是基于 Rspack 构建应用程序，同时也就继承了 Rspack 的全部优势。Gez 提供了一些 Rspack\n的配置，你可以根据自己的情况来选择使用哪个。\n\nTIP\n\n你可以基于 @gez/rspack 的 createRspackHtmlApp 函数构建自己的 Vue、React、Preact、Solid、Svelte\n等不同框架的配置。\n\n\n@gez/rspack#\n\n提供了 Rspack 的基本配置。\n\n\n安装依赖#\n\n如果你没有 @gez/rspack 的依赖，那么你可以通过如下命令安装。\n\n\nNo Loader#\n\ncreateRspackApp 提供了 Gez 的必要配置，默认情况下不提供任何 loader 相关的配置，你还需要配置一些 loader 才能将项目跑起来。\n\nDANGER\n\nGez 的默认配置不可修改，否则 Gez 无法正常工作，点击这里 了解默认配置。\n\n\n选项#\n\nconfig() #\n\n * 类型： config?: (context: RspackAppConfigContext) => void;\n * 默认值： undefined\n * 描述： 自定义 Rspack 配置。\n\n\n例子#\n\n\n\n\nHtml#\n\ncreateRspackHtmlApp 提供了一些开箱即用的配置，支持\nTypescript、Worker、JSON、CSS、Less、Video、Image、Font 的相关文件。\n\n\n选项#\n\ncss #\n\n * 类型： boolean\n * 默认值： true\n * 描述： 是否启用默认的 CSS 配置。\n\nTIP\n\n如果你要自定义 CSS loader，可以设置为 false。\n\nswcLoader #\n\n * 类型： SwcLoaderOptions\n * 默认值： undefined\n * 描述： 透传 builtin-swc-loader。\n\nlessLoader #\n\n * 类型： Record;\n * 默认值： undefined\n * 描述： 透传 less-loader。\n\nstyleResourcesLoader #\n\n * 类型： Record;\n * 默认值： undefined\n * 描述： 透传 style-resources-loader。\n\ndefinePlugin #\n\n * 类型： Record;\n * 默认值： undefined\n * 描述： 透传 DefinePlugin。\n\ntarget.web #\n\n * 类型： string[]\n * 默认值： ['chrome>=87', 'firefox>=78', 'safari>=14', 'edge>=88']\n * 描述： 浏览器的构建目标。\n\nWARNING\n\n构建目标小于默认配置，Gez 可能无法正常工作。\n\ntarget.node #\n\n * 类型： string[]\n * 默认值： ['node>=20']\n * 描述： Node.js 的构建目标。\n\nWARNING\n\n构建目标小于默认配置，无法保证兼容性，请认真考虑后设置。\n\n\n例子#\n\n\n\n\n@gez/rspack-vue#\n\n提供了 Rspack vue 的基本配置。\n\n\n安装#\n\n如果你没有 @gez/rspack-vue 的依赖，那么你可以通过如下命令安装。\n\nTIP\n\n该软件包同时支持 Vue2 和 Vue3。\n\n\n选项#\n\n选项继承于 createRspackHtmlApp。\n\nvueLoader #\n\n * 类型： Record\n * 默认值： undefined\n * 描述： 透传 vue-loader\n\nWARNING\n\nexperimentalInlineMatchResource 和 optimizeSSR 由程序自动设置，你传入也无效。\n\n\nVue2#\n\ncreateRspackVue2App 提供了 Vue2 的 .vue 文件支持。\n\n\n\n\nVue3#\n\ncreateRspackVue3App 提供了 Vue3 的 .vue 文件的支持\n\n\n\n\nJSX/TSX#\n\n目前暂不支持 JSX/TSX ，如果你想要支持它。需要自行添加相关的 Rspack 配置。点击这里了解 Vue 的相关配置。","routePath":"/gez/guide/essentials/rspack","lang":"","toc":[{"text":"@gez/rspack","id":"gezrspack","depth":2,"charIndex":181},{"text":"安装依赖","id":"安装依赖","depth":3,"charIndex":215},{"text":"No Loader","id":"no-loader","depth":2,"charIndex":261},{"text":"选项","id":"选项","depth":3,"charIndex":405},{"text":"config()","id":"config","depth":4,"charIndex":-1},{"text":"例子","id":"例子","depth":3,"charIndex":523},{"text":"Html","id":"html","depth":2,"charIndex":531},{"text":"选项","id":"选项-1","depth":3,"charIndex":632},{"text":"css","id":"css","depth":4,"charIndex":-1},{"text":"swcLoader","id":"swcloader","depth":4,"charIndex":-1},{"text":"lessLoader","id":"lessloader","depth":4,"charIndex":-1},{"text":"styleResourcesLoader","id":"styleresourcesloader","depth":4,"charIndex":-1},{"text":"definePlugin","id":"defineplugin","depth":4,"charIndex":-1},{"text":"target.web","id":"targetweb","depth":4,"charIndex":-1},{"text":"target.node","id":"targetnode","depth":4,"charIndex":-1},{"text":"例子","id":"例子-1","depth":3,"charIndex":1319},{"text":"@gez/rspack-vue","id":"gezrspack-vue","depth":2,"charIndex":1327},{"text":"安装","id":"安装","depth":3,"charIndex":1369},{"text":"选项","id":"选项-2","depth":3,"charIndex":1445},{"text":"vueLoader","id":"vueloader","depth":4,"charIndex":-1},{"text":"Vue2","id":"vue2","depth":3,"charIndex":1618},{"text":"Vue3","id":"vue3","depth":3,"charIndex":1671},{"text":"JSX/TSX","id":"jsxtsx","depth":3,"charIndex":1724}],"domain":"","frontmatter":{},"version":""},{"id":41,"title":"通用约定","content":"#\n\n\n目录规范#\n\n这是一个约定，无法通过程序配置来修改。\n\n\n\n拓展知识\n * gez.name 来源于 package.json 的 name 字段。\n * dist/package.json 来源于根目录的 package.json。\n * 设置 packs.enable 为 true 时，才会对 dist 目录进行归档。\n\n\n缓存策略#\n\n在构建生产代码时，可以设置强缓存部分的资源，总是以 .final[ext] 作为文件名生成规则。也就是说符合这个规则的文件，可以设置强缓存，否则应设置协商缓存。\n\n\nfinal 文件#\n\n\n\n\n其它文件#\n\n\n\n小知识\n\n使用了 gez.middleware 中间件，就会默认帮你处理这个逻辑。在生产环境时，你可以自己来实现静态服务器来控制不同的缓存策略，对于你来说\ngez.middleware 是可选的。点击这里 可以参考实现。\n\n\nNode experimental#\n\n在开发时，gez 会启用一些 Node 实验性质的功能，来获得开发环境支持 ESM 热更新和 TypeScript 的原生支持。\n\n\n\n但是在生产环境中，我们完全不需要这些，你应该使用构建后的产物来运行程序。\n\n\n\nWARNING\n\n如果你在生产环境中使用 gez start 来启动你的应用程序，由于启用了 Node 实验性功能的原因，可能会给你的程序带来未知的风险，请始终使用\nNODE_ENV=production node dist/index.js 来启动。","routePath":"/gez/guide/essentials/std","lang":"","toc":[{"text":"目录规范","id":"目录规范","depth":2,"charIndex":3},{"text":"缓存策略","id":"缓存策略","depth":2,"charIndex":168},{"text":"`final` 文件","id":"final-文件","depth":3,"charIndex":-1},{"text":"其它文件","id":"其它文件","depth":3,"charIndex":272},{"text":"Node experimental","id":"node-experimental","depth":2,"charIndex":394}],"domain":"","frontmatter":{},"version":""},{"id":42,"title":"快速开始","content":"Gez\n\n\nHello world!\n\nURL: ${rc.params.url}\n\n${time} ${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/gez/guide/start/getting-started","lang":"","toc":[{"text":"创建项目","id":"创建项目","depth":2,"charIndex":-1},{"text":"设置 ESM","id":"设置-esm","depth":2,"charIndex":-1},{"text":"安装依赖","id":"安装依赖","depth":2,"charIndex":-1},{"text":"添加脚本","id":"添加脚本","depth":2,"charIndex":-1},{"text":"目录结构","id":"目录结构","depth":2,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":2,"charIndex":-1},{"text":"创建服务器","id":"创建服务器","depth":2,"charIndex":-1},{"text":"服务端渲染","id":"服务端渲染","depth":2,"charIndex":-1},{"text":"客户端渲染","id":"客户端渲染","depth":2,"charIndex":-1},{"text":"启动项目","id":"启动项目","depth":2,"charIndex":-1},{"text":"更多例子","id":"更多例子","depth":2,"charIndex":-1}],"domain":"","frontmatter":{},"version":""},{"id":43,"title":"介绍","content":"#\n\nGez 是 Genesis 迭代的第三个大版本，v1.0 是基于 HTTP 请求来实现的远程组件，v2.0 是基于 Module Federation v1.0\n实现的远程组件。随着主流浏览器都已经支持 ESM，这使得设计一款基于 ESM 的模块链接变成了可能。随着 Rspack v1.0 的发布，提供了对 ESM\n更加友好的支持，这使得我们可以将可能变成了现实。于是，我们将 v3.0 版本重命名为 Gez。\n\n\n为什么选 Gez#\n\n目前，社区中的微服务解决方案大致可归为三类：iframe、micro-app 和 Module Federation。然而，iframe 和 micro-app\n模式更适用于对老旧项目的整合，这种整合往往以牺牲一定的运行效率为代价。而 Module\nFederation，尽管功能强大，却因其较高的接入成本和复杂的内部机制，使得问题排查变得异常困难。\n\n相较于这些方案，Gez展现出了显著的优势。它完全基于 ESM（ECMAScript\nModules）模块系统设计，不仅默认支持服务器端渲染（SSR），还允许每个服务灵活地导出或使用外部模块。这一过程中，Gez保持了简单透明的特性，使得依赖管理变\n得精准可控。更值得一提的是，通过 importmap 技术，Gez能够将多个服务的模块映射到具有强缓存、基于内容哈希的URL上，从而确保了应用的高效与稳定。\n\nTIP\n\nGez的初衷在于打造一个支持服务器端渲染（SSR）的微服务架构，旨在助力构建高性能且规模庞大的 Web 应用程序。\n\n\n调研#\n\n * 现代JavaScript支持：参考了Vite的定义，基准为浏览器对 ESM dynamic import 和 import.meta 的支持。\n   \n   * Chrome ≥ 87\n   * Firefox ≥ 78\n   * Safari ≥ 14\n   * Edge ≥ 88\n   * Node.js ≥ 22.6\n\n * 内容哈希与importmap：构建产物具备内容哈希，利用 importmap 技术将 `` 转换为\n   ssr-npm/npm/vue.[contenthash].final.js，确保静态文件的强缓存。对于不支持importmap的浏览器，采用\n   es-module-shims 进行降级处理。\n\n * Rspack与ESM外部依赖：Rspack 的 externalsType 支持 module-import，便于设置 ESM 模块的外部依赖。\n\n * Node.js上的ESM热更新：尽管在 Node.js 上实现 ESM 模块的热更新具有挑战性，但可通过启用 node\n   --experimental-vm-modules --experimental-import-meta-resolve 来实现。\n\n * Node.js原生支持TypeScript：自 Node.js 22.6 版本起，支持\n   --experimental-strip-types，从而原生支持运行TypeScript代码。\n\nTIP\n\n经过一年多的构思与对Vite、farmfe、Rspack的深入调研，我们成功打通了这条路径，并确保其生产环境可用性。\n\n\n定位#\n\nGez 的定位并非旨在成为一个如同 Next.js 或 Nuxt.js 那样功能全面的大型框架。相反，它致力于成为一个具备\nTypescript、ESM、SSR（服务器端渲染）以及模块链接等核心特性的基础设施。基于这样的基础，开发者可以自由地构建出属于自己的\nNext.js。对于那些追求高度定制化的实现，Gez 将是一个理想的选择。\n\n\n模块链接#\n\n在大型项目开发过程中，为了提高代码的可维护性和复用性，通常会将项目拆分为多个组件库、工具库和业务模块。这些部分往往分散在不同的位置，可能以 multirepo\n或 monorepo 包的形式进行管理和存储。然而，这些分散的模块最终需要通过系统的主程序进行有效的整合和链接，以确保整个系统的协同工作。\n\n在这个过程中，Gez发挥了至关重要的作用。其核心功能在于能够快速地将这些分布在不同地方的模块进行链接，从而形成一个完整、统一的系统。通过Gez，开发者可以轻松地\n实现一个服务的发布，并确保其他相关服务能够同步更新，大大提高了开发效率和系统的一致性。\n\n简而言之，Gez为大型项目的模块整合提供了便捷、高效的解决方案，使得分散的模块能够迅速聚合，共同构建出稳定、可靠的大型应用系统。\n\n\n设计理念#\n\n在构建大型软件项目时，我们遵循以下核心理念，以确保系统的稳定性、可维护性和高效性：\n\n\n基础服务集中化#\n\n我们倡导设计一个集中的基础服务，该服务将作为所有第三方依赖的单一来源。这种集中化的管理方式能够简化依赖关系，降低系统的复杂性。\n\n\n统一依赖管理#\n\n基础服务不仅提供第三方依赖，还负责这些依赖的统一维护和更新。通过集中管理依赖的生命周期，我们可以确保整个系统中使用的依赖版本是一致的，从而避免版本冲突和不一致性\n问题。\n\n\n一次发布，全局生效#\n\n当基础服务中的第三方依赖发生更新时，我们采用“一次发布，所有业务系统生效”的策略。这意味着一旦基础服务发布了新的依赖版本，所有依赖该服务的业务系统都将立即使用这\n些更新，无需在每个业务系统中单独进行更新操作。这种机制大大提高了系统的更新效率和一致性。\n\n\n业务与依赖解耦#\n\n我们鼓励将业务服务与第三方依赖进行解耦。业务服务应专注于构建和处理业务逻辑，而不直接管理第三方依赖。所有对第三方依赖的引用都应通过基础服务进行间接访问。这种设计\n使得业务服务更加轻量级、灵活，且易于维护和扩展。\n\n综上所述，我们的设计理念旨在通过基础服务的集中化管理和统一维护，简化大型项目中的依赖关系，提高系统的整体稳定性和开发效率。同时，通过解耦业务服务与第三方依赖，我\n们为系统的未来扩展和维护奠定了坚实的基础。\n\n\n兼容性#\n\n所有的主流浏览器都已经支持，针对一些低版本的浏览器，可以提供一个升级的页面来引导用户升级它的浏览器。\n\n\n可靠性#\n\n从 v1.0、v2.0 到现在的 v3.0，已经走过了将近 5 年的时光，支持起了公司内部数十个业务的项目，并且不断地推动业务项目的升级。","routePath":"/gez/guide/start/introduction","lang":"","toc":[{"text":"为什么选 Gez","id":"为什么选-gez","depth":2,"charIndex":211},{"text":"调研","id":"调研","depth":2,"charIndex":667},{"text":"定位","id":"定位","depth":2,"charIndex":1371},{"text":"模块链接","id":"模块链接","depth":2,"charIndex":1546},{"text":"设计理念","id":"设计理念","depth":2,"charIndex":1897},{"text":"基础服务集中化","id":"基础服务集中化","depth":3,"charIndex":1948},{"text":"统一依赖管理","id":"统一依赖管理","depth":3,"charIndex":2024},{"text":"一次发布，全局生效","id":"一次发布全局生效","depth":3,"charIndex":2120},{"text":"业务与依赖解耦","id":"业务与依赖解耦","depth":3,"charIndex":2260},{"text":"兼容性","id":"兼容性","depth":2,"charIndex":2482},{"text":"可靠性","id":"可靠性","depth":2,"charIndex":2541}],"domain":"","frontmatter":{},"version":""}]